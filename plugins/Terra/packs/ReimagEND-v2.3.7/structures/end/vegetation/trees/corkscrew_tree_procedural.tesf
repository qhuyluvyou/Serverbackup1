num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

str trunkBlock = "minecraft:stripped_acacia_log";

num trunkRadius = 2;
num length = 20+randomInt(30);
num trunkTranslate = -2;

num topBranches = 0;
num topBranchLengthUpwardsMin = 7+randomInt(3);
num topBranchLengthOutwardsMin = 4+randomInt(3);
num topBranchVerticalDirection = 1;
num topBranchLeafRadiusMin = 4;
num topBranchLeafTranslate = 0;
num topBranchLeafTopFlatness = 1;
num topBranchLeafBottomFlatness = 2;
num topBranchLeafDensity = 0.5;
str topBranchLeafStructure = "oak_leaves_clump";
str topBranchBlockX = "minecraft:stripped_acacia_log[axis=x]";
str topBranchBlockY = "minecraft:stripped_acacia_log[axis=y]";
str topBranchBlockZ = "minecraft:stripped_acacia_log[axis=z]";

// tree trunk
for(num h = trunkTranslate; h <= trunkTranslate+length; h = h + 0.1) {
    // Reduce radius inversely to length
    num r = (trunkRadius/length * -h/2) + trunkRadius;

    // Generate sphere at each point
    for(num x = -r; x <= r; x = x + 1) {
        for(num y = -r; y <= r; y = y + 1) {
            for(num z = -r; z <= r; z = z + 1) {
                if (pow(x,2)+pow(y,2)+pow(z,2) < pow(r,2)) {
                    block(x, h + y - trunkRadius, z, trunkBlock, false);     
                }       
            }
        }
    }
}

num branchAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num b = 1; b <= topBranches; b = b + 1) {
    num t = b/topBranches;
    num ti = 1-t;
    // Branch direction vector
    num dx = sin(branchAngle) * t;
    num dy = topBranchVerticalDirection;
    num dz = cos(branchAngle) * t;
    // Normalize vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;
    // Branch origin
    num ox = 0;
    num oy = length-3;
    num oz = 0;
    // Set branch block based on largest unsigned vector component
    str branchBlock = topBranchBlockY;
    if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = topBranchBlockX;
    else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = topBranchBlockZ;
    num branchLength = topBranchLengthUpwardsMin*ti + topBranchLengthOutwardsMin*t;
    // Generate branch
    for (num l = 0; l <= branchLength; l = l + 1) {
        block(l*dx+ox, l*dy+oy, l*dz+oz, branchBlock);
    }
    // Rotate angle of next branch
    branchAngle = branchAngle + goldenAngle;
    // Generate leaf cluster at the end of the branch
    num radius = topBranchLeafRadiusMin;
    num radiusSquared = pow(radius, 2);
    // Leaf cluster origin (end of branch)
    num lox = ox+branchLength*dx;
    num loy = oy+branchLength*dy + topBranchLeafTranslate;
    num loz = oz+branchLength*dz;
    for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
        for (num cy = ceil(-radius/topBranchLeafBottomFlatness); cy <= ceil(radius/topBranchLeafTopFlatness); cy = cy + 1) {
            for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                num squashFactor = topBranchLeafBottomFlatness;
                if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < topBranchLeafDensity) {
                    structure(lox+cx, loy+cy, loz+cz, topBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                }
            }
        }
    }
}

num direction = randomInt(randPrecision)/randPrecision;
num dirInterval = 0.1;
num r = 2;

for (num h = 5; h < length; h = h + 0.1) {
    for(num x = -r; x <= r; x = x + 1) {
        for(num y = -r; y <= r; y = y + 1) {
            for(num z = -r; z <= r; z = z + 1) {
                if (pow(x,2)+pow(y,2)+pow(z,2) < pow(r,2)) {
                    structure(x+cos(direction)*2, h + y, z+sin(direction)*2, "oak_leaves_clump", "NONE");     
                }       
            }
        }
    }
    direction = direction + dirInterval;
    r = r - 0.001;
}

