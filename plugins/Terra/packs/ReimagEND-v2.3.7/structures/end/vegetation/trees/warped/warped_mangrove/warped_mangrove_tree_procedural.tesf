num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;
num twopi = 6.28318530718;

num trunkHeight = 10+randomInt(8);
num trunkBase = 7+randomInt(4);
str trunkBlock = "minecraft:stripped_warped_hyphae";
str rootBlock = "minecraft:stripped_warped_hyphae";
str undergroundRootBlock = "minecraft:stripped_warped_hyphae";
str underwaterRootBlock = "minecraft:stripped_warped_hyphae";

num sideBranchInterval = 1;
num sideBranchMinHeight = 0;
num sideBranchLengthMin = 10;
num sideBranchLengthVariation = 6;
num sideBranchVerticalVariation = 0;
num sideBranchVerticalDirection = 0.2+randomInt(randPrecision)/randPrecision;
num sideBranchLeafRadiusMin = 5;
num sideBranchLeafTranslate = 0;
num sideBranchLeafTopFlatness = 2;
num sideBranchLeafBottomFlatness = 4;
num sideBranchLeafDensity = 0.6;
str sideBranchLeafStructure = "warped_wart_clump";
str sideBranchBlockX = "minecraft:stripped_warped_hyphae";
str sideBranchBlockY = "minecraft:stripped_warped_hyphae";
str sideBranchBlockZ = "minecraft:stripped_warped_hyphae";

num topBranches = 10+randomInt(3);
num topBranchLengthUpwardsMin = 11+randomInt(3);
num topBranchLengthOutwardsMin = 12+randomInt(3);
num topBranchVerticalDirection = 0.4;
num topBranchLeafRadiusMin = 5;
num topBranchLeafTranslate = 0;
num topBranchLeafTopFlatness = 1.5;
num topBranchLeafBottomFlatness = 1;
num topBranchLeafDensity = 0.6;
str topBranchLeafStructure = "warped_wart_clump";
str topBranchBlockX = "minecraft:stripped_warped_hyphae";
str topBranchBlockY = "minecraft:stripped_warped_hyphae";
str topBranchBlockZ = "minecraft:stripped_warped_hyphae";

if (getBlock(0,trunkHeight,0) != "minecraft:air") fail;
if (getBlock(0,-5,0) == "minecraft:air") fail;
if (getBlock(5,-5,0) == "minecraft:air") fail;
if (getBlock(-5,-5,0) == "minecraft:air") fail;
if (getBlock(0,-5,5) == "minecraft:air") fail;
if (getBlock(0,-5,-5) == "minecraft:air") fail;

// Generate roots at base of trunk
num roots = 5+randomInt(2);
num rootMaxLength = 30;
num rootDroop = 0.06;
num rootVerticalDirection = 0.4-randomInt(randPrecision)/randPrecision*0.3;
num rootAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num r = 0; r < roots; r = r + 1) {
    // Branch direction vector
    num dx = sin(rootAngle);
    num dy = rootVerticalDirection;
    num dz = cos(rootAngle);
    // Normalize vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;

    for (num i = 0; i <= rootMaxLength; i = i + 0.5) {
        num cx = i*dx;
        num cy = trunkBase+i*dy;
        num cz = i*dz;

        // Place root block
        str currentBlock = getBlock(cx, cy, cz);
        if (currentBlock == "minecraft:end_stone") {
            break;
        } else {
            block(cx, cy, cz, rootBlock);
            block(cx+1, cy, cz+1, rootBlock);
            block(cx+1, cy, cz, rootBlock);
            block(cx, cy, cz+1, rootBlock);
        }

        // Place warped fungus on root block
        num fungusRoll = randomInt(10); // 1 in 10 chance
        if (fungusRoll == 0) {
            block(cx, cy+1, cz, "minecraft:warped_fungus", false);
        }

        // Point vector down more
        dy = dy - rootDroop;
        // Normalize vector
        mag = sqrt(pow2(dx)+pow2(dy)+pow2(dz));
        dx = dx/mag;
        dy = dy/mag;
        dz = dz/mag;
    }

    rootAngle = rootAngle + goldenAngle;
}

num branchAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num i = 0; i < trunkHeight; i = i + 1) {
    if (i > sideBranchMinHeight) {
        if (i % sideBranchInterval == 0) {
            // Branch direction vector
            num dx = sin(branchAngle);
            num dy = sideBranchVerticalDirection + randomInt(randPrecision)/randPrecision*sideBranchVerticalVariation;
            num dz = cos(branchAngle);
            // Normalize vector
            num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
            dx = dx/mag;
            dy = dy/mag;
            dz = dz/mag;
            // Branch origin
            num ox = 0;
            num oy = i+trunkBase;
            num oz = 0;
            // Set branch block based on largest unsigned vector component
            str branchBlock = sideBranchBlockY;
            if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = sideBranchBlockX;
            else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = sideBranchBlockZ;
            num branchLength = sideBranchLengthMin + randomInt(randPrecision)/randPrecision*sideBranchLengthVariation;
            // Generate branch
            for (num l = 1; l <= branchLength; l = l + 1) {
                block(l*dx+ox, l*dy+oy, l*dz+oz, branchBlock);
                block(l*dx+ox+1, l*dy+oy, l*dz+oz+1, branchBlock);
                block(l*dx+ox+1, l*dy+oy, l*dz+oz, branchBlock);
                block(l*dx+ox, l*dy+oy, l*dz+oz+1, branchBlock);
            }
            // Rotate angle of next branch
            branchAngle = branchAngle + goldenAngle;
            // Generate leaf cluster at the end of the branch
            num radius = sideBranchLeafRadiusMin;
            num radiusSquared = pow(radius, 2);
            // Leaf cluster origin (end of branch)
            num lox = ox+branchLength*dx;
            num loy = oy+branchLength*dy + sideBranchLeafTranslate;
            num loz = oz+branchLength*dz;
            for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
                for (num cy = ceil(-radius/sideBranchLeafBottomFlatness); cy <= ceil(radius/sideBranchLeafTopFlatness); cy = cy + 1) {
                    for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                        num squashFactor = sideBranchLeafBottomFlatness;
                        if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                        num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                        if (distanceSquared<radiusSquared && randomInt(randPrecision) / randPrecision < sideBranchLeafDensity) {
                            structure(lox+cx, loy+cy, loz+cz, sideBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                        }
                    }
                }
            }
        }
    }
    block(0, i+trunkBase, 0, trunkBlock);
    block(1, i+trunkBase, 0, trunkBlock);
    block(0, i+trunkBase, 1, trunkBlock);
    block(1, i+trunkBase, 1, trunkBlock);
}

for (num b = 1; b <= topBranches; b = b + 1) {
    num t = b/topBranches;
    num ti = 1-t;
    // Branch direction vector
    num dx = sin(branchAngle) * t;
    num dy = topBranchVerticalDirection;
    num dz = cos(branchAngle) * t;
    // Normalize vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;
    // Branch origin
    num ox = 0;
    num oy = trunkBase + trunkHeight;
    num oz = 0;
    // Set branch block based on largest unsigned vector component
    str branchBlock = topBranchBlockY;
    if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = topBranchBlockX;
    else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = topBranchBlockZ;
    num branchLength = topBranchLengthUpwardsMin*ti + topBranchLengthOutwardsMin*t;
    // Generate branch
    for (num l = 0; l <= branchLength; l = l + 1) {
        block(l*dx+ox, l*dy+oy, l*dz+oz, branchBlock);
        block(l*dx+ox+1, l*dy+oy, l*dz+oz+1, branchBlock);
        block(l*dx+ox+1, l*dy+oy, l*dz+oz, branchBlock);
        block(l*dx+ox, l*dy+oy, l*dz+oz+1, branchBlock);
    }
    // Rotate angle of next branch
    branchAngle = branchAngle + goldenAngle;
    // Generate leaf cluster at the end of the branch
    num radius = topBranchLeafRadiusMin;
    num radiusSquared = pow(radius, 2);
    // Leaf cluster origin (end of branch)
    num lox = ox+branchLength*dx;
    num loy = oy+branchLength*dy + topBranchLeafTranslate;
    num loz = oz+branchLength*dz;
    for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
        for (num cy = ceil(-radius/topBranchLeafBottomFlatness); cy <= ceil(radius/topBranchLeafTopFlatness); cy = cy + 1) {
            for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                num squashFactor = topBranchLeafBottomFlatness;
                if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < topBranchLeafDensity) {
                    structure(lox+cx, loy+cy, loz+cz, topBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                }
            }
        }
    }
}

for (num x = -20; x < 20; x = x + 1) {
  for (num y = 0; y < trunkHeight+30; y = y + 1) {
    for (num z = -20; z < 20; z = z + 1) {
      structure(x,y,z,"warped_buds", "NONE");
    }
  }  
}