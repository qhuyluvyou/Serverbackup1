num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

str trunkBlock = "minecraft:black_concrete";
str altBlock = "minecraft:black_concrete_powder";
str setBlock = trunkBlock;

num trunkRadius = 2+randomInt(2);
num length = 30+randomInt(20);
num xTranslate = 0;
num zTranslate = 0;

num topBranches = 1;
num topBranchLengthUpwardsMin = 7+randomInt(3);
num topBranchLengthOutwardsMin = 4+randomInt(3);
num topBranchVerticalDirection = 1;
num topBranchLeafRadiusMin = 1;
num topBranchLeafTranslate = 0;
num topBranchLeafTopFlatness = 1;
num topBranchLeafBottomFlatness = 2;
num topBranchLeafDensity = 0.5;
str topBranchLeafStructure = "burble_bulb";
num heightDir = 1;

num sideBranchInterval = 8;
num sideBranchMinHeight = 5;
num sideBranchMaxHeight = length-5;
num sideBranchLengthMin = 14;
num sideBranchLengthVariation = 2+randomInt(2);
num sideBranchVerticalVariation = 0;
num sideBranchVerticalDirection = 0.5+randomInt(randPrecision)/randPrecision/4;
num sideBranchLeafRadiusMin = 1;
num sideBranchLeafTranslate = 0;
num sideBranchLeafTopFlatness = 1;
num sideBranchLeafBottomFlatness = 2;
num sideBranchLeafDensity = 0.5;
str sideBranchLeafStructure = "burble_bulb";

if (getBlock(0,length,0) != "minecraft:air") fail;

num branchAngle = randomInt(randPrecision)/randPrecision*2*pi;

// tree trunk
for(num h = 0; h <= length; h = h + 1) {
    // Reduce radius inversely to length
    num r = (trunkRadius/length * -h/2) + trunkRadius;

    if (h % 10 == 0) {
        if (getBlock(0,length,0) != "minecraft:air") fail;
    }

    // Generate sphere at each point
    for(num x = -r; x <= r; x = x + 1) {
        for(num y = -r; y <= r; y = y + 1) {
            for(num z = -r; z <= r; z = z + 1) {
                if (pow(x,2)+pow(y,2)+pow(z,2) < pow(r,2)) {

                    if (randomInt(3) == 0) {
                        block(x + xTranslate, h + y - trunkRadius, z + zTranslate, altBlock, false);
                        block(x + xTranslate, h + y - trunkRadius - 1, z + zTranslate, trunkBlock, false);
                    } else block(x + xTranslate, h + y - trunkRadius, z + zTranslate, trunkBlock, false);
                }
            }
        }
    }

    if (h > sideBranchMinHeight) {
        if (h < sideBranchMaxHeight) {
            if (h % sideBranchInterval == 0) {
                sideBranchVerticalDirection = (0.5+randomInt(randPrecision)/randPrecision/4)-randomInt((2));
                // Branch direction vector
                num dx = sin(branchAngle);
                num dy = sideBranchVerticalDirection + randomInt(randPrecision)/randPrecision*sideBranchVerticalVariation;
                num dz = cos(branchAngle);
                // Normalize vector
                num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
                dx = dx/mag;
                dy = dy/mag;
                dz = dz/mag;
                // Branch origin
                num ox = xTranslate;
                num oy = h;
                num oz = zTranslate;
                // Set branch block based on largest unsigned vector component
                num branchLength = sideBranchLengthMin + randomInt(randPrecision)/randPrecision*sideBranchLengthVariation;
                // Generate branch
                for (num l = 0; l <= branchLength; l = l + 1) {

                    if (randomInt(3) == 0) {
                        block(l*dx+ox, l*dy+oy, l*dz+oz, altBlock);
                        block(l*dx+ox, l*dy+oy-1, l*dz+oz, trunkBlock);
                    } else block(l*dx+ox, l*dy+oy, l*dz+oz, trunkBlock);

                    if (randomInt(3) == 0) {
                        block(l*dx+ox+1, l*dy+oy, l*dz+oz, altBlock);
                        block(l*dx+ox+1, l*dy+oy-1, l*dz+oz, trunkBlock);
                    } else block(l*dx+ox+1, l*dy+oy, l*dz+oz, trunkBlock);

                    if (randomInt(3) == 0) {
                        block(l*dx+ox+1, l*dy+oy, l*dz+oz+1, altBlock);
                        block(l*dx+ox+1, l*dy+oy-1, l*dz+oz+1, trunkBlock);
                    } else block(l*dx+ox+1, l*dy+oy, l*dz+oz+1, trunkBlock);

                    if (randomInt(3) == 0) {
                        block(l*dx+ox, l*dy+oy, l*dz+oz+1, altBlock);
                        block(l*dx+ox, l*dy+oy-1, l*dz+oz+1, trunkBlock);
                    } else block(l*dx+ox, l*dy+oy, l*dz+oz+1, trunkBlock);

                }
                // Rotate angle of next branch
                branchAngle = branchAngle + goldenAngle;
                // Generate leaf cluster at the end of the branch
                num radius = sideBranchLeafRadiusMin;
                num radiusSquared = pow(radius, 2);
                // Leaf cluster origin (end of branch)
                num lox = ox+branchLength*dx;
                num loy = oy+branchLength*dy + sideBranchLeafTranslate;
                num loz = oz+branchLength*dz;
                for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
                    for (num cy = ceil(-radius/sideBranchLeafBottomFlatness); cy <= ceil(radius/sideBranchLeafTopFlatness); cy = cy + 1) {
                        for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                            num squashFactor = sideBranchLeafBottomFlatness;
                            if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                            num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                            if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < sideBranchLeafDensity) {
                                structure(lox+cx, loy+cy, loz+cz, sideBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                            }
                        }
                    }
                }
            }
        }
    }
    xTranslate = xTranslate+(1-randomInt(3));
    zTranslate = zTranslate+(1-randomInt(3));
}
for (num b = 1; b <= topBranches; b = b + 1) {
    num t = b/topBranches;
    num ti = 1-t;
    // Branch direction vector
    num dx = sin(branchAngle) * t;
    num dy = topBranchVerticalDirection;
    num dz = cos(branchAngle) * t;
    // Normalize vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;
    // Branch origin
    num ox = xTranslate;
    num oy = length-3;
    num oz = zTranslate;
    // Set branch block based on largest unsigned vector component
    num branchLength = topBranchLengthUpwardsMin*ti + topBranchLengthOutwardsMin*t;
    // Generate branch
    for (num l = 0; l <= branchLength; l = l + 1) {
        if (randomInt(3) == 0) {
            block(l*dx+ox, l*dy+oy, l*dz+oz, altBlock);
            block(l*dx+ox, l*dy+oy-1, l*dz+oz, trunkBlock);
        }
        block(l*dx+ox, l*dy+oy, l*dz+oz, trunkBlock);
    }
    // Rotate angle of next branch
    branchAngle = branchAngle + goldenAngle;
    // Generate leaf cluster at the end of the branch
    num radius = topBranchLeafRadiusMin;
    num radiusSquared = pow(radius, 2);
    // Leaf cluster origin (end of branch)
    num lox = ox+branchLength*dx;
    num loy = oy+branchLength*dy + topBranchLeafTranslate;
    num loz = oz+branchLength*dz;
    for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
        for (num cy = ceil(-radius/topBranchLeafBottomFlatness); cy <= ceil(radius/topBranchLeafTopFlatness); cy = cy + 1) {
            for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                num squashFactor = topBranchLeafBottomFlatness;
                if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < topBranchLeafDensity) {
                    structure(lox+cx, loy+cy, loz+cz, topBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                }
            }
        }
    }
}